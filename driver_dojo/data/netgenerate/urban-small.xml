<?xml version="1.0" encoding="UTF-8"?>

<!-- generated by Eclipse SUMO netgenerate Version 1.12.0
-->

<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://sumo.dlr.de/xsd/netgenerateConfiguration.xsd">

    <random_network>
        <!-- Forces NETGEN to build a random network -->
        <rand value="True"/>

        <!-- Describes how many times an edge shall be added to the net -->
        <rand.iterations value="30"/>

        <rand.num-tries value="5" synonymes="num-tries rand-num-tries" type="INT"/>


        <!-- The minimum distance for each edge -->
        <rand.min-distance value="80"/>

        <!-- The maximum distance for each edge -->
        <rand.max-distance value="150" synonymes="max-dist rand-max-distance" type="FLOAT"/>

        <!-- Draw lane numbers randomly from [1,default.lanenumber] -->
        <rand.random-lanenumber value="true"/>

        <!-- Probability for roads to continue at each node -->
        <rand.bidi-probability value="0.9" synonymes="connectivity rand-connectivity" type="FLOAT"/>

        <!-- Draw edge priority randomly from [1,default.priority] -->
        <rand.random-priority value="true"/>

        <!-- Probability for a node having exactly 1 neighbor -->
        <rand.neighbor-dist1 value="3" synonymes="dist1 rand-neighbor-dist1" type="FLOAT"/>

        <!-- Probability for a node having exactly 2 neighbors -->
        <rand.neighbor-dist2 value="0" synonymes="dist2 rand-neighbor-dist2" type="FLOAT"/>

        <!-- Probability for a node having exactly 3 neighbors -->
        <rand.neighbor-dist3 value="3" synonymes="dist3 rand-neighbor-dist3" type="FLOAT"/>

        <!-- Probability for a node having exactly 4 neighbors -->
        <rand.neighbor-dist4 value="4" synonymes="dist4 rand-neighbor-dist4" type="FLOAT"/>

        <!-- Probability for a node having exactly 5 neighborss -->
        <rand.neighbor-dist5 value="1" synonymes="dist5 rand-neighbor-dist5" type="FLOAT"/>

        <!-- Probability for a node having exactly 6 neighbors -->
        <rand.neighbor-dist6 value="1" synonymes="dist6 rand-neighbor-dist6" type="FLOAT"/>

        <!-- Place nodes on a regular grid with spacing rand.min-distance -->
        <rand.grid value="true" type="BOOL"/>

    </random_network>

    <building_defaults>
        <!-- The default number of lanes in an edge -->
        <default.lanenumber value="3"/>

        <!-- The default priority of an edge -->
        <default.priority value="3"/>

        <!-- The default turning radius of intersections -->
        <default.junctions.radius value="5"/>

        <!-- The default method for computing lane shapes from edge shapes -->
        <default.spreadtype value="right" type="STR"/>

        <!-- Whether junctions should be kept clear by default -->
        <default.junctions.keep-clear value="false" type="BOOL"/>

        <!-- [traffic_light|priority|right_before_left|traffic_light_right_on_red|priority_stop|allway_stop|...] Determines junction type (see wiki/Networks/PlainXML#Node_types) -->
        <!--priority: Vehicles on a low-priority edge have to wait until vehicle on a high-priority edge have passed the junction.-->
        <!--traffic_light: The junction is controlled by a traffic light (priority rules are used to avoid collisions if conflicting links have green light at the same time).-->
        <!--right_before_left: Vehicles will let vehicle coming from their right side pass.-->
        <!--unregulated: The junction is completely unregulated - all vehicle may pass without braking; Collision detection on the intersection is disabled but collisions beyond the intersection will be detected and are likely to occur.-->
        <!--traffic_light_unregulated: The junction is controlled by a traffic light without any further rules. This may cause collision if unsafe signal plans are used. Note, that collisions within the intersection will never be detected.-->
        <!--priority_stop: This works like a priority-junction but vehicle on minor links always have to stop before passing-->
        <!--allway_stop: This junction works like an All-way stop-->
        <!--rail_signal: This junction is controlled by a rail signal. This type of junction/control is only useful for rails.-->
        <!--zipper: This junction connects edges where the number of lanes decreases and traffic needs to merge zipper-style (late merging).-->
        <!--rail_crossing: This junction models a rail road crossing. It will allow trains to pass unimpeded and will restrict vehicle via traffic signals when a train is approaching..-->
        <!--traffic_light_right_on_red: The junction is controlled by a traffic light as for type traffic_light. Additionally, right-turning vehicle may drive in any phase whenever it is safe to do so (after stopping once). This behavior is known as right-turn-on-red.-->
        <default-junction-type value="unregulated" synonymes="j junctions" type="STR"/>

    </building_defaults>

    <random_number>
        <!-- Initialises the random number netgenerate with the current system time -->
        <random value="true"/>

    </random_number>

    <pedestrian>

        <!-- Guess pedestrian sidewalks based on edge speed -->
        <sidewalks.guess value="true" type="BOOL"/>
<!--        &lt;!&ndash; Guess pedestrian crossings based on the presence of sidewalks &ndash;&gt;-->
<!--        <crossings.guess value="true" type="BOOL"/>-->

    </pedestrian>

    <junctions>
        <!-- Allow building right-before-left junctions when the incoming edge speeds are below FLOAT (m/s) -->
        <junctions.right-before-left.speed-threshold value="13.6111" type="FLOAT"/>

        <!-- Omits internal links -->
        <no-internal-links value="false" type="BOOL"/>

        <!-- Disables building turnarounds -->
        <no-turnarounds value="true" type="BOOL"/>

        <!-- Disables building turnarounds at tls-controlled junctions -->
        <no-turnarounds.tls value="false" synonymes="no-tls-turnarounds" type="BOOL"/>

        <!-- Disables building turnarounds at geometry-like junctions -->
        <no-turnarounds.geometry value="true" type="BOOL"/>

        <!-- Disables building turnarounds except at dead end junctions -->
        <no-turnarounds.except-deadend value="false" type="BOOL"/>

        <!-- Disables building turnarounds except at junctions with a dedicated turning lane -->
        <no-turnarounds.except-turnlane value="false" type="BOOL"/>

        <!-- Disables building turnarounds at fringe junctions -->
        <no-turnarounds.fringe value="false" type="BOOL"/>

        <!-- Disables building connections to left -->
        <no-left-connections value="false" type="BOOL"/>

        <!-- Joins junctions that are close to each other (recommended for OSM import) -->
        <junctions.join value="false" type="BOOL"/>

        <!-- Determines the maximal distance for joining junctions (defaults to 10) -->
        <junctions.join-dist value="10" type="FLOAT"/>

        <!-- Generate INT intermediate points to smooth out intersection corners -->
        <junctions.corner-detail value="5" type="INT"/>

        <!-- Generate INT intermediate points to smooth out lanes within the intersection -->
        <junctions.internal-link-detail value="5" type="INT"/>

        <!-- Generate longer intersections to allow for smooth s-curves when the number of lanes changes -->
        <junctions.scurve-stretch value="10.0" type="FLOAT"/>

        <!-- Builds common edges for turning connections with common from- and to-edge. This causes discrepancies between geometrical length and assigned length due to averaging but enables lane-changing while turning -->
        <junctions.join-turns value="false" type="BOOL"/>

        <!-- Limits speed on junctions to an average lateral acceleration of at most FLOAT m/s^2) -->
        <junctions.limit-turn-speed value="5.5" type="FLOAT"/>

        <!-- Do not limit turn speed for angular changes below FLOAT (degrees). The value is subtracted from the geometric angle before computing the turning radius. -->
        <junctions.limit-turn-speed.min-angle value="15" type="FLOAT"/>

        <!-- Do not limit turn speed for angular changes below FLOAT (degrees) on railway edges. The value is subtracted from the geometric angle before computing the turning radius. -->
        <junctions.limit-turn-speed.min-angle.railway value="35" type="FLOAT"/>

        <!-- Warn about turn speed limits that reduce the speed of straight connections by more than FLOAT -->
        <junctions.limit-turn-speed.warn.straight value="5" type="FLOAT"/>

        <!-- Warn about turn speed limits that reduce the speed of turning connections (no u-turns) by more than FLOAT -->
        <junctions.limit-turn-speed.warn.turn value="22" type="FLOAT"/>

        <!-- Default radius for junctions that do not require wide vehicle turns -->
        <junctions.small-radius value="1.5" type="FLOAT"/>

        <!-- Use maximum value of incoming and outgoing edge speed on junction instead of average -->
        <junctions.higher-speed value="false" type="BOOL"/>

        <!-- Assumed vehicle width for computing internal junction positions -->
        <internal-junctions.vehicle-width value="1.8" type="FLOAT"/>

        <!-- Forces rectangular cuts between lanes and intersections -->
        <rectangular-lane-cut value="false" type="BOOL"/>

        <!-- Allow driving onto a multi-lane road if there are foes on other lanes (at roundabouts) -->
        <check-lane-foes.roundabout value="true" type="BOOL"/>

        <!-- Allow driving onto a multi-lane road if there are foes on other lanes (everywhere) -->
        <check-lane-foes.all value="false" type="BOOL"/>

    </junctions>

    <processing>
        <!-- Generate INT left-turn lanes -->
        <turn-lanes value="0" type="INT"/>

        <!-- Set the length of generated turning lanes to FLOAT -->
        <turn-lanes.length value="20" type="FLOAT"/>

        <!-- Apply random spatial perturbation in x direction according the the given distribution -->
        <perturb-x value="normc(0.0, 1.0)" type="STR"/>

        <!-- Apply random spatial perturbation in y direction according the the given distribution -->
        <perturb-y value="normc(0.0, 1.0)" type="STR"/>

        <!-- Apply random spatial perturbation in z direction according the the given distribution -->
        <perturb-z value="0" type="STR"/>

        <!-- Enable roundabout-guessing -->
        <roundabouts.guess value="true" synonymes="guess-roundabouts" type="BOOL"/>

        <!-- Default visibility when approaching a roundabout -->
        <roundabouts.visibility-distance value="9" type="FLOAT"/>

        <!-- Enable guessing of opposite direction lanes usable for overtaking -->
        <opposites.guess value="false" type="BOOL"/>

        <!-- Ensure that opposite edges have the same length -->
        <opposites.guess.fix-lengths value="false" type="BOOL"/>

        <!-- Enable guessing of network fringe nodes -->
        <fringe.guess value="false" type="BOOL"/>

        <!-- Assumes left-hand traffic on the network -->
        <lefthand value="false" type="BOOL"/>

        <!-- Merges edges which connect the same nodes and are close to each other (recommended for VISSIM import) -->
        <edges.join value="true" type="BOOL"/>

    </processing>

</configuration>
